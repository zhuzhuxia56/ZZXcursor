name: Build and Package

on:
  push:
    branches: [ main, master, dev ]
  pull_request:
    branches: [ main, master ]
  release:
    types: [ created ]
  workflow_dispatch:  # 允许手动触发

jobs:
  build-windows:
    name: 构建 Windows 版本
    runs-on: windows-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
    
    - name: 设置 Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: 检查图标文件
      run: |
        if (Test-Path "ZZX.ico") {
          Write-Host "✅ 找到 Windows 图标文件"
        } else {
          Write-Host "⚠️  警告: 未找到 ZZX.ico"
        }
      shell: pwsh
    
    - name: 打包 Windows 应用
      run: |
        Write-Host "开始打包 Windows 版本..."
        pyinstaller build.spec --clean
      shell: pwsh
    
    - name: 检查打包结果
      run: |
        if (Test-Path "dist\Zzx Cursor Auto Manager\Zzx Cursor Auto Manager.exe") {
          Write-Host "✅ Windows 打包成功"
          Get-ChildItem "dist\Zzx Cursor Auto Manager" -Recurse | Measure-Object -Property Length -Sum | Select-Object @{Name="Size(MB)";Expression={[math]::Round($_.Sum/1MB,2)}}
        } else {
          Write-Host "❌ Windows 打包失败"
          exit 1
        }
      shell: pwsh
    
    - name: 压缩 Windows 便携版
      run: |
        Compress-Archive -Path "dist\Zzx Cursor Auto Manager" -DestinationPath "Zzx-Cursor-Auto-Windows-Portable.zip"
      shell: pwsh
    
    - name: 安装 Inno Setup
      run: |
        Write-Host "安装 Inno Setup..."
        choco install innosetup -y
      shell: pwsh
    
    - name: 创建 Windows 安装包
      run: |
        Write-Host "使用 Inno Setup 创建安装包..."
        & "C:\Program Files (x86)\Inno Setup 6\ISCC.exe" installer.iss
        if ($LASTEXITCODE -eq 0) {
          Write-Host "✅ 安装包创建成功"
          if (Test-Path "output\*.exe") {
            Get-ChildItem "output\*.exe" | ForEach-Object { Write-Host "生成文件: $($_.Name)" }
          }
        } else {
          Write-Host "⚠️  安装包创建失败，但继续流程"
        }
      shell: pwsh
      continue-on-error: true
    
    - name: 上传 Windows 便携版
      uses: actions/upload-artifact@v4
      with:
        name: windows-portable
        path: Zzx-Cursor-Auto-Windows-Portable.zip
        retention-days: 30
    
    - name: 上传 Windows 安装包
      uses: actions/upload-artifact@v4
      if: hashFiles('output/*.exe') != ''
      with:
        name: windows-installer
        path: output/*.exe
        retention-days: 30
    
    - name: 上传 Windows 文件夹（调试用）
      uses: actions/upload-artifact@v4
      with:
        name: windows-folder
        path: dist/Zzx Cursor Auto Manager/
        retention-days: 7

  build-macos:
    name: 构建 macOS 版本
    runs-on: macos-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
    
    - name: 设置 Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements_macos.txt
    
    - name: 创建 macOS 图标
      run: |
        echo "检查图标文件..."
        if [ -f "ZZX.ico" ]; then
          echo "✅ 找到源图标文件 ZZX.ico"
          
          if [ ! -f "ZZX.icns" ]; then
            echo "⚠️  未找到 ZZX.icns，尝试自动生成..."
            
            # 尝试使用脚本生成
            if [ -f "create_macos_icon.sh" ]; then
              chmod +x create_macos_icon.sh
              ./create_macos_icon.sh || echo "自动生成失败，将不使用图标"
            else
              echo "未找到生成脚本，跳过图标生成"
            fi
          else
            echo "✅ 找到 ZZX.icns"
          fi
        else
          echo "⚠️  警告: 未找到 ZZX.ico"
        fi
    
    - name: 打包 macOS 应用
      run: |
        echo "开始打包 macOS 版本..."
        chmod +x build_macos.sh
        ./build_macos.sh
    
    - name: 检查打包结果
      run: |
        if [ -d "dist/Zzx Cursor Auto Manager.app" ]; then
          echo "✅ macOS 打包成功"
          du -sh "dist/Zzx Cursor Auto Manager.app"
        else
          echo "❌ macOS 打包失败"
          exit 1
        fi
    
    - name: 创建 DMG 安装包
      run: |
        echo "创建 DMG 安装镜像..."
        cd dist
        
        # 方法1: 使用 hdiutil 创建 DMG
        if hdiutil create -volname "Zzx Cursor Auto Manager" -srcfolder "Zzx Cursor Auto Manager.app" -ov -format UDZO "Zzx-Cursor-Auto-macOS.dmg"; then
          echo "✅ DMG 创建成功"
          ls -lh *.dmg
        else
          echo "⚠️  DMG 创建失败，使用 ZIP 作为备用"
          zip -r "Zzx-Cursor-Auto-macOS.zip" "Zzx Cursor Auto Manager.app"
        fi
    
    - name: 上传 macOS DMG 安装包
      uses: actions/upload-artifact@v4
      if: hashFiles('dist/*.dmg') != ''
      with:
        name: macos-dmg
        path: dist/*.dmg
        retention-days: 30
    
    - name: 上传 macOS ZIP（备用）
      uses: actions/upload-artifact@v4
      if: hashFiles('dist/*.zip') != ''
      with:
        name: macos-zip
        path: dist/*.zip
        retention-days: 30
    
    - name: 移除隔离属性（本地测试用）
      if: success()
      run: |
        xattr -cr "dist/Zzx Cursor Auto Manager.app" || true

  # 如果是 Release，自动上传到 Release
  upload-release:
    name: 上传到 Release
    needs: [build-windows, build-macos]
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    
    steps:
    - name: 下载 Windows 便携版
      uses: actions/download-artifact@v4
      with:
        name: windows-portable
        path: ./artifacts
      continue-on-error: true
    
    - name: 下载 Windows 安装包
      uses: actions/download-artifact@v4
      with:
        name: windows-installer
        path: ./artifacts
      continue-on-error: true
    
    - name: 下载 macOS DMG
      uses: actions/download-artifact@v4
      with:
        name: macos-dmg
        path: ./artifacts
      continue-on-error: true
    
    - name: 下载 macOS ZIP
      uses: actions/download-artifact@v4
      with:
        name: macos-zip
        path: ./artifacts
      continue-on-error: true
    
    - name: 上传到 Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          ./artifacts/*.zip
          ./artifacts/*.exe
          ./artifacts/*.dmg
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
